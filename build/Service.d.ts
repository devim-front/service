/**
 * Базовый класс сервиса.
 */
export declare class Service {
    /**
     * Экземпляр сервиса.
     */
    protected static instance: any;
    /**
     * Указывает, что конструктор сервиса был вызван с помощью статического
     * метода create, а не напрямую через оператор new.
     */
    private static isCreate;
    /**
     * Указывает, что экземпляр данного класса уже был создан.
     */
    protected static get isExists(): boolean;
    /**
     * Возвращает экземпляр сервиса. Если на момент вызова этого метода сервис
     * ещё не был инициализирован методом init (или уже удален через метод
     * delete), будет выброшено исключение.
     */
    static get<T extends typeof Service>(this: T): InstanceType<T>;
    /**
     * Создает экземпляр сервиса и сохраняет его.
     *
     * @internal
     * @param args Аргументы конструктора.
     */
    protected static create<T extends typeof Service>(...args: ConstructorParameters<T>): void;
    /**
     * Инициализирует экземпляр сервиса. Аргументы, указанные при вызове, будут
     * переданы в конструктор класса. Повторный вызов init уничтожит предыдущий
     * экземпляр вызовов delete и создаст новый.
     *
     * @param args Аргументы.
     */
    static init<T extends typeof Service>(...args: ConstructorParameters<T>): void;
    /**
     * Удаляет существующий экземпляр сервиса, освобождая все занятые им ресурсы.
     */
    static delete(): void;
    /**
     * Создает экземпляр сервиса. Получить созданный экземпляр можно с помощью
     * статического метода get, вызов конструктора напрямую приводит к ошибке.
     *
     * @param _args Аргументы, полученные из метода create.
     */
    constructor(..._args: any[]);
    /**
     * Освобождает все занятые экземпляром сервиса ресурсы, подготавливая его к
     * удалению.
     */
    protected dispose(): void;
}
